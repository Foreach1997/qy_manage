<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qy.dao.ProMakeMapper">
  <resultMap id="BaseResultMap" type="com.qy.entity.ProMake">
    <id column="make_id" jdbcType="INTEGER" property="makeId" />
    <result column="make_type" jdbcType="INTEGER" property="makeType" />
    <result column="make_file" jdbcType="VARCHAR" property="makeFile" />
    <result column="pro_code" jdbcType="VARCHAR" property="proCode" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    make_id, make_type, make_file, pro_code, create_time, user_id
  </sql>
  <select id="selectByExample" parameterType="com.qy.entity.ProMakeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pro_make
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from pro_make
    where make_id = #{makeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from pro_make
    where make_id = #{makeId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.qy.entity.ProMakeExample">
    delete from pro_make
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qy.entity.ProMake">
    insert into pro_make (make_id, make_type, make_file, 
      pro_code, create_time, user_id
      )
    values (#{makeId,jdbcType=INTEGER}, #{makeType,jdbcType=INTEGER}, #{makeFile,jdbcType=VARCHAR}, 
      #{proCode,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{userId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.qy.entity.ProMake">
    insert into pro_make
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="makeId != null">
        make_id,
      </if>
      <if test="makeType != null">
        make_type,
      </if>
      <if test="makeFile != null">
        make_file,
      </if>
      <if test="proCode != null">
        pro_code,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="userId != null">
        user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="makeId != null">
        #{makeId,jdbcType=INTEGER},
      </if>
      <if test="makeType != null">
        #{makeType,jdbcType=INTEGER},
      </if>
      <if test="makeFile != null">
        #{makeFile,jdbcType=VARCHAR},
      </if>
      <if test="proCode != null">
        #{proCode,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.qy.entity.ProMakeExample" resultType="java.lang.Long">
    select count(*) from pro_make
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update pro_make
    <set>
      <if test="record.makeId != null">
        make_id = #{record.makeId,jdbcType=INTEGER},
      </if>
      <if test="record.makeType != null">
        make_type = #{record.makeType,jdbcType=INTEGER},
      </if>
      <if test="record.makeFile != null">
        make_file = #{record.makeFile,jdbcType=VARCHAR},
      </if>
      <if test="record.proCode != null">
        pro_code = #{record.proCode,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update pro_make
    set make_id = #{record.makeId,jdbcType=INTEGER},
      make_type = #{record.makeType,jdbcType=INTEGER},
      make_file = #{record.makeFile,jdbcType=VARCHAR},
      pro_code = #{record.proCode,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      user_id = #{record.userId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qy.entity.ProMake">
    update pro_make
    <set>
      <if test="makeType != null">
        make_type = #{makeType,jdbcType=INTEGER},
      </if>
      <if test="makeFile != null">
        make_file = #{makeFile,jdbcType=VARCHAR},
      </if>
      <if test="proCode != null">
        pro_code = #{proCode,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
    </set>
    where make_id = #{makeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qy.entity.ProMake">
    update pro_make
    set make_type = #{makeType,jdbcType=INTEGER},
      make_file = #{makeFile,jdbcType=VARCHAR},
      pro_code = #{proCode,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=INTEGER}
    where make_id = #{makeId,jdbcType=INTEGER}
  </update>
</mapper>